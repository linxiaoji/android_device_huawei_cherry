diff --git a/sensors/AKMLog.h b/sensors/AKMLog.h
new file mode 100644
index 0000000..02d34f8
--- /dev/null
+++ b/sensors/AKMLog.h
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_AKMLOG_H
+#define ANDROID_AKMLOG_H
+
+#undef LOG_TAG
+#define LOG_TAG "Sensors"
+#include <cutils/log.h>
+
+/*** Constant definition ******************************************************/
+#ifndef ALOGE
+#ifdef LOGE
+#define ALOGE	LOGE
+#endif
+#endif
+#ifndef ALOGE_IF
+#ifdef LOGE_IF
+#define ALOGE_IF	LOGE_IF
+#endif
+#endif
+
+#ifndef ALOGW
+#ifdef LOGW
+#define ALOGW	LOGW
+#endif
+#endif
+#ifndef ALOGW_IF
+#ifdef LOGW_IF
+#define ALOGW_IF	LOGW_IF
+#endif
+#endif
+
+#ifndef ALOGI
+#ifdef LOGI
+#define ALOGI	LOGI
+#endif
+#endif
+#ifndef ALOGI_IF
+#ifdef LOGI_IF
+#define ALOGI_IF	LOGI_IF
+#endif
+#endif
+
+#ifndef ALOGD
+#ifdef LOGD
+#define ALOGD	LOGD
+#endif
+#endif
+#ifndef ALOGD_IF
+#ifdef LOGD_IF
+#define ALOGD_IF	LOGD_IF
+#endif
+#endif
+
+#ifndef ALOGV
+#ifdef LOGV
+#define ALOGV	LOGV
+#endif
+#endif
+#ifndef ALOGV_IF
+#ifdef LOGV_IF
+#define ALOGV_IF	LOGV_IF
+#endif
+#endif
+
+#endif // ANDROID_AKMLOG_H
+
diff --git a/sensors/AkmSensor.cpp b/sensors/AkmSensor.cpp
index 60f288a..3f5a8f6 100644
--- a/sensors/AkmSensor.cpp
+++ b/sensors/AkmSensor.cpp
@@ -21,21 +21,26 @@
 #include <unistd.h>
 #include <dirent.h>
 #include <sys/select.h>
+#include <dlfcn.h>
 
-#include <linux/akm8975.h>
-
-#include <cutils/log.h>
+#include "AKMLog.h"
 
 #include "AkmSensor.h"
 
+#define AKMD_DEFAULT_INTERVAL	200000000
+#define AKM_SYSFS_PATH	"/sys/class/compass/akm8975/"
+
 /*****************************************************************************/
 
 AkmSensor::AkmSensor()
-    : SensorBase(AKM_DEVICE_NAME, "compass"),
-      mEnabled(0),
+: SensorBase(NULL, "compass"),
       mPendingMask(0),
       mInputReader(32)
 {
+	for (int i=0; i<numSensors; i++) {
+		mEnabled[i] = 0;
+		mDelay[i] = -1;
+	}
     memset(mPendingEvents, 0, sizeof(mPendingEvents));
 
     mPendingEvents[Accelerometer].version = sizeof(sensors_event_t);
@@ -53,118 +58,126 @@ AkmSensor::AkmSensor()
     mPendingEvents[Orientation  ].type = SENSOR_TYPE_ORIENTATION;
     mPendingEvents[Orientation  ].orientation.status = SENSOR_STATUS_ACCURACY_HIGH;
 
-    for (int i=0 ; i<numSensors ; i++)
-        mDelays[i] = 200000000; // 200 ms by default
-
-    // read the actual value of all sensors if they're enabled already
-    struct input_absinfo absinfo;
-    short flags = 0;
-
-    open_device();
-
-    if (!ioctl(dev_fd, ECS_IOCTL_APP_GET_AFLAG, &flags)) {
-        if (flags)  {
-            mEnabled |= 1<<Accelerometer;
-        }
-    }
-    if (!ioctl(dev_fd, ECS_IOCTL_APP_GET_MVFLAG, &flags)) {
-        if (flags)  {
-            mEnabled |= 1<<MagneticField;
-        }
-    }
-    if (!ioctl(dev_fd, ECS_IOCTL_APP_GET_MFLAG, &flags)) {
-        if (flags)  {
-            mEnabled |= 1<<Orientation;
-        }
-    }
-    if (!mEnabled) {
-        close_device();
-    }
+    if (data_fd) {
+		strcpy(input_sysfs_path, AKM_SYSFS_PATH);
+		input_sysfs_path_len = strlen(input_sysfs_path);
+	} else {
+		input_sysfs_path[0] = '\0';
+		input_sysfs_path_len = 0;
+	}
 }
 
-AkmSensor::~AkmSensor() {
+AkmSensor::~AkmSensor()
+{
+	for (int i=0; i<numSensors; i++) {
+		enable(i, 0);
+	}
 }
 
-int AkmSensor::enable(int32_t handle, int en)
+int AkmSensor::enable(int32_t handle, int enabled)
 {
-    int what = -1;
-    switch (handle) {
-        case ID_A: what = Accelerometer; break;
-        case ID_M: what = MagneticField; break;
-        case ID_O: what = Orientation;   break;
-    }
+	int id = handle2id(handle);
+	int err = 0;
+	char buffer[2];
 
-    if (uint32_t(what) >= numSensors)
-        return -EINVAL;
+	ALOGD("AkmSensor::enable handle=%d, enabled=%d", handle, enabled);
 
-    int newState  = en ? 1 : 0;
-    int err = 0;
+	switch (id) {
+	case Accelerometer:
+		strcpy(&input_sysfs_path[input_sysfs_path_len], "enable_acc");
+		break;
+	case MagneticField:
+		strcpy(&input_sysfs_path[input_sysfs_path_len], "enable_mag");
+		break;
+	case Orientation:
+		strcpy(&input_sysfs_path[input_sysfs_path_len], "enable_fusion");
+		break;
+	default:
+		ALOGE("AkmSensor::enable unknown handle (%d)", handle);
+		return -EINVAL;
+	}
 
-    if ((uint32_t(newState)<<what) != (mEnabled & (1<<what))) {
-        if (!mEnabled) {
-            open_device();
-        }
-        int cmd;
-        switch (what) {
-            case Accelerometer: cmd = ECS_IOCTL_APP_SET_AFLAG;  break;
-            case MagneticField: cmd = ECS_IOCTL_APP_SET_MVFLAG; break;
-            case Orientation:   cmd = ECS_IOCTL_APP_SET_MFLAG;  break;
-        }
-        short flags = newState;
-        err = ioctl(dev_fd, cmd, &flags);
-        err = err<0 ? -errno : 0;
-        ALOGE_IF(err, "ECS_IOCTL_APP_SET_XXX failed (%s)", strerror(-err));
-        if (!err) {
-            mEnabled &= ~(1<<what);
-            mEnabled |= (uint32_t(flags)<<what);
-            update_delay();
-        }
-        if (!mEnabled) {
-            close_device();
-        }
+	buffer[0] = '\0';
+	buffer[1] = '\0';
+
+	if ((id == Accelerometer)||(id == MagneticField)) {
+		if (enabled) {
+			if (mEnabled[id] <= 0)
+				buffer[0] = '1';
+		} else {
+			if (mEnabled[id] == 1)
+				buffer[0] = '0';
+		}
+	} else {
+		int tmp = mEnabled[Orientation];
+		if (enabled) {
+			if (tmp <= 0)
+				buffer[0] = '1';
+		} else {
+			if (tmp == 1)
+				buffer[0] = '0';
+		}
+	}
+
+    if (buffer[0] != '\0') {
+		err = write_sys_attribute(input_sysfs_path, buffer, 1);
+		if (err != 0) {
+			return err;
+		}
+		ALOGD("AkmSensor::enable write %s to %s",
+			buffer,
+			&input_sysfs_path[input_sysfs_path_len]);
     }
+
+	if (enabled) {
+		mEnabled[id] = 1;
+	} else {
+		mEnabled[id] = 0;
+	}
+
     return err;
 }
 
 int AkmSensor::setDelay(int32_t handle, int64_t ns)
 {
-#ifdef ECS_IOCTL_APP_SET_DELAY
-    int what = -1;
-    switch (handle) {
-        case ID_A: what = Accelerometer; break;
-        case ID_M: what = MagneticField; break;
-        case ID_O: what = Orientation;   break;
-    }
+	int id = handle2id(handle);
+	int err = 0;
+	char buffer[32];
+	int bytes;
 
-    if (uint32_t(what) >= numSensors)
-        return -EINVAL;
+	ALOGD("AkmSensor::setDelay handle=%d, ns=%lld", handle, ns);
 
-    if (ns < 0)
+    if (ns < -1 || 2147483647 < ns) {
+		ALOGE("AkmSensor::setDelay invalid delay (%lld)", ns);
         return -EINVAL;
+	}
 
-    mDelays[what] = ns;
-    return update_delay();
-#else
-    return -1;
-#endif
-}
-
-int AkmSensor::update_delay()
-{
-    if (mEnabled) {
-        uint64_t wanted = -1LLU;
-        for (int i=0 ; i<numSensors ; i++) {
-            if (mEnabled & (1<<i)) {
-                uint64_t ns = mDelays[i];
-                wanted = wanted < ns ? wanted : ns;
-            }
-        }
-        short delay = int64_t(wanted) / 1000000;
-        if (ioctl(dev_fd, ECS_IOCTL_APP_SET_DELAY, &delay)) {
-            return -errno;
-        }
+    switch (id) {
+        case Accelerometer:
+			strcpy(&input_sysfs_path[input_sysfs_path_len], "delay_acc");
+			break;
+        case MagneticField:
+			strcpy(&input_sysfs_path[input_sysfs_path_len], "delay_mag");
+			break;
+        case Orientation:
+			strcpy(&input_sysfs_path[input_sysfs_path_len], "delay_fusion");
+			break;
+		default:
+			ALOGE("AkmSensor::setDelay unknown handle (%d)", handle);
+			return -EINVAL;
     }
-    return 0;
+
+	if (ns != mDelay[id]) {
+   		bytes = sprintf(buffer, "%lld", ns);
+		err = write_sys_attribute(input_sysfs_path, buffer, bytes);
+		if (err == 0) {
+			mDelay[id] = ns;
+			ALOGD("AkmSensor::setDelay %s to %f ms.",
+				&input_sysfs_path[input_sysfs_path_len], ns/1000000.0f);
+		}
+	}
+
+    return err;
 }
 
 int AkmSensor::readEvents(sensors_event_t* data, int count)
@@ -181,7 +194,7 @@ int AkmSensor::readEvents(sensors_event_t* data, int count)
 
     while (count && mInputReader.readEvent(&event)) {
         int type = event->type;
-        if (type == EV_REL) {
+        if (type == EV_ABS) {
             processEvent(event->code, event->value);
             mInputReader.next();
         } else if (type == EV_SYN) {
@@ -190,7 +203,11 @@ int AkmSensor::readEvents(sensors_event_t* data, int count)
                 if (mPendingMask & (1<<j)) {
                     mPendingMask &= ~(1<<j);
                     mPendingEvents[j].timestamp = time;
-                    if (mEnabled & (1<<j)) {
+					//ALOGD("data=%8.5f,%8.5f,%8.5f",
+						//mPendingEvents[j].data[0],
+						//mPendingEvents[j].data[1],
+						//mPendingEvents[j].data[2]);
+                    if (mEnabled[j]) {
                         *data++ = mPendingEvents[j];
                         count--;
                         numEventReceived++;
@@ -206,55 +223,74 @@ int AkmSensor::readEvents(sensors_event_t* data, int count)
             mInputReader.next();
         }
     }
-
     return numEventReceived;
 }
 
+int AkmSensor::setAccel(sensors_event_t* data)
+{
+	int err;
+	int16_t acc[3];
+
+	/* Input data is already formated to Android definition. */
+	acc[0] = (int16_t)(data->acceleration.x / GRAVITY_EARTH * AKSC_LSG);
+	acc[1] = (int16_t)(data->acceleration.y / GRAVITY_EARTH * AKSC_LSG);
+	acc[2] = (int16_t)(data->acceleration.z / GRAVITY_EARTH * AKSC_LSG);
+
+	strcpy(&input_sysfs_path[input_sysfs_path_len], "accel");
+	err = write_sys_attribute(input_sysfs_path, (char*)acc, 6);
+	if (err < 0) {
+		ALOGD("AkmSensor: %s write failed.",
+				&input_sysfs_path[input_sysfs_path_len]);
+	}
+	return err;
+}
+
+int AkmSensor::handle2id(int32_t handle)
+{
+    switch (handle) {
+        case ID_A:
+			return Accelerometer;
+        case ID_M:
+			return MagneticField;
+		case ID_O:
+			return Orientation;
+		default:
+			ALOGE("AkmSensor: unknown handle (%d)", handle);
+			return -EINVAL;
+    }
+}
+
 void AkmSensor::processEvent(int code, int value)
 {
     switch (code) {
-        case EVENT_TYPE_ACCEL_X:
-            mPendingMask |= 1<<Accelerometer;
-            mPendingEvents[Accelerometer].acceleration.x = value * CONVERT_A_X;
-            break;
-        case EVENT_TYPE_ACCEL_Y:
-            mPendingMask |= 1<<Accelerometer;
-            mPendingEvents[Accelerometer].acceleration.y = value * CONVERT_A_Y;
-            break;
-        case EVENT_TYPE_ACCEL_Z:
-            mPendingMask |= 1<<Accelerometer;
-            mPendingEvents[Accelerometer].acceleration.z = value * CONVERT_A_Z;
-            break;
-
         case EVENT_TYPE_MAGV_X:
             mPendingMask |= 1<<MagneticField;
-            mPendingEvents[MagneticField].magnetic.x = value * CONVERT_M_X;
+            mPendingEvents[MagneticField].magnetic.x = value * CONVERT_M;
             break;
         case EVENT_TYPE_MAGV_Y:
             mPendingMask |= 1<<MagneticField;
-            mPendingEvents[MagneticField].magnetic.y = value * CONVERT_M_Y;
+            mPendingEvents[MagneticField].magnetic.y = value * CONVERT_M;
             break;
         case EVENT_TYPE_MAGV_Z:
             mPendingMask |= 1<<MagneticField;
-            mPendingEvents[MagneticField].magnetic.z = value * CONVERT_M_Z;
+            mPendingEvents[MagneticField].magnetic.z = value * CONVERT_M;
+            break;
+        case EVENT_TYPE_MAGV_STATUS:
+            mPendingMask |= 1<<MagneticField;
+            mPendingEvents[MagneticField].magnetic.status = value;
             break;
 
         case EVENT_TYPE_YAW:
             mPendingMask |= 1<<Orientation;
-            mPendingEvents[Orientation].orientation.azimuth = value * CONVERT_O_Y;
+            mPendingEvents[Orientation].orientation.azimuth = value * CONVERT_O;
             break;
         case EVENT_TYPE_PITCH:
             mPendingMask |= 1<<Orientation;
-            mPendingEvents[Orientation].orientation.pitch = value * CONVERT_O_P;
+            mPendingEvents[Orientation].orientation.pitch = value * CONVERT_O;
             break;
         case EVENT_TYPE_ROLL:
             mPendingMask |= 1<<Orientation;
-            mPendingEvents[Orientation].orientation.roll = value * CONVERT_O_R;
-            break;
-        case EVENT_TYPE_ORIENT_STATUS:
-            mPendingMask |= 1<<Orientation;
-            mPendingEvents[Orientation].orientation.status =
-                    uint8_t(value & SENSOR_STATE_MASK);
+            mPendingEvents[Orientation].orientation.roll = value * CONVERT_O;
             break;
     }
 }
diff --git a/sensors/AkmSensor.h b/sensors/AkmSensor.h
index 762133c..8445827 100644
--- a/sensors/AkmSensor.h
+++ b/sensors/AkmSensor.h
@@ -47,14 +47,18 @@ public:
     virtual int enable(int32_t handle, int enabled);
     virtual int readEvents(sensors_event_t* data, int count);
     void processEvent(int code, int value);
+	int setAccel(sensors_event_t* data);
 
 private:
-    int update_delay();
-    uint32_t mEnabled;
+    int mEnabled[numSensors];
+	int64_t mDelay[numSensors];
     uint32_t mPendingMask;
     InputEventCircularReader mInputReader;
     sensors_event_t mPendingEvents[numSensors];
-    uint64_t mDelays[numSensors];
+	char input_sysfs_path[PATH_MAX];
+	int input_sysfs_path_len;
+
+	int handle2id(int32_t handle);
 };
 
 /*****************************************************************************/
diff --git a/sensors/SensorBase.cpp b/sensors/SensorBase.cpp
index 0bd2ba7..82b8ae8 100644
--- a/sensors/SensorBase.cpp
+++ b/sensors/SensorBase.cpp
@@ -36,7 +36,9 @@ SensorBase::SensorBase(
     : dev_name(dev_name), data_name(data_name),
       dev_fd(-1), data_fd(-1)
 {
-    data_fd = openInput(data_name);
+    if (data_name) {
+        data_fd = openInput(data_name);
+    }
 }
 
 SensorBase::~SensorBase() {
@@ -64,6 +66,26 @@ int SensorBase::close_device() {
     return 0;
 }
 
+int SensorBase::write_sys_attribute(
+	const char *path, const char *value, int bytes)
+{
+    int fd, amt;
+
+    fd = open(path, O_WRONLY);
+    if (fd < 0) {
+        ALOGE("SensorBase::write_attr failed to open %s (%s)",
+            path, strerror(errno));
+        return -1;
+    }
+
+    amt = write(fd, value, bytes);
+    amt = ((amt == -1) ? -errno : 0);
+    ALOGE_IF(amt < 0, "SensorBase::write_attr failed to write %s (%s)",
+    path, strerror(errno));
+    close(fd);
+    return amt;
+}
+
 int SensorBase::getFd() const {
     return data_fd;
 }
diff --git a/sensors/SensorBase.h b/sensors/SensorBase.h
index c8cc276..2b4ad85 100644
--- a/sensors/SensorBase.h
+++ b/sensors/SensorBase.h
@@ -45,6 +45,10 @@ protected:
     int open_device();
     int close_device();
 
+    /* AKM IF */
+    int write_sys_attribute(
+        char const *path, char const *value, int bytes);
+
 public:
             SensorBase(
                     const char* dev_name,
diff --git a/sensors/nusensors.cpp b/sensors/nusensors.cpp
index 58cca08..1a9c12f 100644
--- a/sensors/nusensors.cpp
+++ b/sensors/nusensors.cpp
@@ -168,6 +168,9 @@ int sensors_poll_context_t::pollEvents(sensors_event_t* data, int count)
                     // no more data for this sensor
                     mPollFds[i].revents = 0;
                 }
+				if ((0 != nb) && (acceleration == i)) {
+					static_cast<AkmSensor*>(mSensors[akm])->setAccel(&data[nb-1]);
+				}
                 count -= nb;
                 nbEvents += nb;
                 data += nb;
diff --git a/sensors/nusensors.h b/sensors/nusensors.h
index b35da17..36d92c8 100644
--- a/sensors/nusensors.h
+++ b/sensors/nusensors.h
@@ -69,14 +69,14 @@ int init_nusensors(hw_module_t const* module, hw_device_t** device);
 #define EVENT_TYPE_ACCEL_Y          REL_Y
 #define EVENT_TYPE_ACCEL_Z          REL_Z
 
-#define EVENT_TYPE_YAW              REL_RX
-#define EVENT_TYPE_PITCH            REL_RY
-#define EVENT_TYPE_ROLL             REL_RZ
-#define EVENT_TYPE_ORIENT_STATUS    REL_HWHEEL
+#define EVENT_TYPE_YAW              ABS_HAT0Y
+#define EVENT_TYPE_PITCH            ABS_HAT1X
+#define EVENT_TYPE_ROLL             ABS_HAT1Y
 
-#define EVENT_TYPE_MAGV_X           REL_DIAL
-#define EVENT_TYPE_MAGV_Y           REL_WHEEL
-#define EVENT_TYPE_MAGV_Z           REL_MISC
+#define EVENT_TYPE_MAGV_X           ABS_RY
+#define EVENT_TYPE_MAGV_Y           ABS_RZ
+#define EVENT_TYPE_MAGV_Z           ABS_THROTTLE
+#define EVENT_TYPE_MAGV_STATUS      ABS_RUDDER
 
 #define EVENT_TYPE_LIGHT            MSC_RAW
 #define EVENT_TYPE_PRESSURE         ABS_PRESSURE
@@ -87,6 +87,7 @@ int init_nusensors(hw_module_t const* module, hw_device_t** device);
 
 // 1024 LSG = 1G
 #define LSG                         (1024.0f)
+#define AKSC_LSG					(720.0f)
 #define MAX_RANGE_A                 (2*GRAVITY_EARTH)
 // conversion of acceleration data to SI units (m/s^2)
 #define CONVERT_A                   (GRAVITY_EARTH / LSG)
